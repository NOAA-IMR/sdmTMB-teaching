---
title: "Simulating random fields"
format: html
editor: visual
execute: 
  echo: true
  eval: false
---

# Goals:

-   Understand the spatial range.
-   Become familiar with spatial random fields through simulation.
-   Become familiar with spatiotemporal random fields and how they can combine with spatial random fields.
-   Understand how correlation in spatiotemporal random fields looks.

```{r}
#| echo=FALSE
library(sdmTMB)
library(ggplot2)
options(ggplot2.continuous.colour = "viridis")
options(ggplot2.continuous.fill = "viridis")
theme_set(theme_light())
```

# Understanding the spatial range

The spatial range is the distance at which two data points are effectively independent. Technically, this is the distance at which correlation declines to approximately 0.13.

We can visualize the Mat√©rn correlation function for various range values:

```{r}
range <- 0.5 #< try changing this

kappa <- sqrt(8) / range
distance <- seq(0.001, 1, length.out = 100)
correlation <- kappa * distance * besselK(kappa * distance, nu = 1)
plot(distance, correlation, type = "l", ylim = c(0, 1))
abline(h = 0.13, lty = 2) # 0.13 correlation
abline(v = range, lty = 2)
```

Here we have a unitless distance from 0 to 1. In real situations these would be in something like m or km and so the range would be units of m or km.

### Exercise:

1.  Try running the previous chunk over and over with various `range` values. Note how the correlation function changes.

# Spatial simulation

Next we will simulate some spatial random fields to understand what they look like and how their parameters control them.

First, this chunk creates a set of X and Y spatial coordinates and constructs a mesh using a minimum triangle edge length cutoff distance of 0.05. We need this for the internal random field calculations with the SPDE.

```{r}
# A grid of X and Y values:
predictor_dat <- expand.grid(
  X = seq(0, 1, length.out = 100), Y = seq(0, 1, length.out = 100)
)
mesh <- make_mesh(predictor_dat, c("X", "Y"), cutoff = 0.05)
plot(mesh)
```

The basic function for simulating random fields in sdmTMB is `sdmTMB_simulate()`.

-   The formula here contains only an intercept but could include covariates.

-   The family is Gaussian to specify that we simulate a normally distributed response.

-   The range (see above) is 0.6.

-   The two important standard deviation parameters are `sigma_O` (controlling the variance of `omega`, the spatial random field) and `phi` (controlling the observation error variance).

-   We are plotting `observed` (observed values: the expected value plus observation error).

```{r}
sim_dat <- sdmTMB_simulate(
  formula = ~ 1,
  data = predictor_dat,
  mesh = mesh,
  family = gaussian(link = "identity"),
  range = 0.6, #< try changing this (spatial range)
  sigma_O = 0.2, #< try changing this (spatial standard deviation)
  phi = 0.001, #< try changing this observation error standard deviation
  B = 0 # intercept
)
# head(sim_dat)

ggplot(sim_dat, aes(X, Y, fill = observed)) +
  geom_raster()
```

### Exercise:

1.  Try running the previous chunk over and over. Try changing the `range` and `sigma_O` values. What do you observe?
2.  Try increasing the observation error standard deviation `phi` and re-running it many times. Try making it equal to `sigma_O` and twice its size. What happens when observation error is much larger than `sigma_O`?

# Spatiotemporal simulation

```{r}
# make fake predictor(s) (a1) and sampling locations:
predictor_dat2 <- expand.grid(
  X = seq(0, 1, length.out = 100), Y = seq(0, 1, length.out = 100), year = 1:6
)
mesh2 <- make_mesh(predictor_dat, c("X", "Y"), cutoff = 0.1)
```

```{r}
sim_dat2 <- sdmTMB_simulate(
  formula = ~ 1,
  data = predictor_dat2,
  time = "year",
  mesh = mesh2,
  family = gaussian(),
  range = 0.5, #< spatial/spatiotemporal range
  sigma_O = 0, #< spatial SD
  sigma_E = 0.1, #< spatiotemporal SD
  phi = 0.001,
  B = 0 # intercept
)
# head(sim_dat2)
```

```{r spatial-fields}
ggplot(sim_dat2, aes(X, Y, fill = omega_s)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2()
```

```{r spatiotemporal-fields}
ggplot(sim_dat2, aes(X, Y, fill = epsilon_st)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2()
```

```{r simulated-observations}
ggplot(sim_dat2, aes(X, Y, fill = observed)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2()
```

### Exercise:

1.  Try running the previous 4 chunks over and over and observe the various components.
2.  What do you notice about `omega_s` (spatial random field) across the time slices? Conversely, what do you notice about `epsilon_st` (spatiotemporal random fields) across time?
3.  Try increasing `sigma_E` (spatiotemporal SD) to be larger than `sigma_O` (spatial SD). How do the observations change?

# Correlated spatiotemporal fields

The above spatiotemporal fields were left as their default: independent across years (`spatiotemporal = "iid"`). They can also be correlated. Here we will simulate and plot spatiotemporal fields with various levels of correlation.

```{r}
sim_dat3 <- sdmTMB_simulate(
  formula = ~ 1,
  data = predictor_dat2,
  time = "year",
  mesh = mesh2,
  family = gaussian(),
  range = 0.5,
  sigma_O = 0,
  sigma_E = 0.1,
  spatiotemporal = "ar1", #< field type
  rho = 0.6, #< AR(1) field correlation
  phi = 0.001,
  B = 0 # intercept
)
ggplot(sim_dat3, aes(X, Y, fill = epsilon_st)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2()
```

### Exercise:

1.  In the previous chunk, try setting the AR(1) random field correlation (`rho`) to values ranging from 0 to near 1 (e.g., 0.99). What do you observe?
2.  When might you observe a process that resembles the above?
3.  What happens when `rho` is \< 0? Is `rho` more likely to be \> or \< than 0 in ecological systems? Can you think of a situation where `rho < 0`?
