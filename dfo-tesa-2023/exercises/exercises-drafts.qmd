











## Pacific cod case study

#### Exploring the data

It's worth first exploring the data, which represents survey data on Pacific cod collected from Queen Charlotte Sound (British Columbia).

```{r}
head(pcod)
```

The data contains original locations (`lon` and `lat`), UTM transformed locations in zone 9 (`X` and `Y`). It also contains a couple of different responses -- `present` (describing the presence-absence of Pacific cod) and `density` (CPUE) in units of kg/km\^2. If the `X` and `Y` columns didn't already exist, we could have created those with \`sdmTMB::add_utm_columns()\`.

Look at the data spatially:
  
  ```{r}
ggplot(pcod, aes(X, Y, size = density)) + geom_point()
```

And by year

```{r}
ggplot(pcod, aes(X, Y, size = density, colour = log(density + 1))) +
  geom_point() +
  facet_wrap(~year)
```

#### Constructing a mesh

```{r}
mesh <- make_mesh(pcod, xy_cols = c("X", "Y"), cutoff = 10)
plot(mesh)
```

1.  Try to adjust the size of the cutoff distance to explore the effects of decreasing the mesh resolution

#### Fitting a model with a spatial field

This first model includes a smoother (P-spline) on depth, and models total density using a Tweedie distribution. The spatial field is estimated, but spatiotemporal fields are not.

```{r}
fit1 <- sdmTMB(
  density ~ s(depth),
  data = pcod,
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  silent = FALSE
)
```

We can look at the maximum gradient and standard errors. Is this consistent with convergence?
  
  ```{r}
max(fit1$gradients)
fit1$sd_report
```

We can use the tidy function to get the coefficients for the fixed effects,

```{r}
tidy(fit1, conf.int = TRUE)
```

and by setting `effects = "ran_pars"`, can extract random components

```{r}
tidy(fit1, effects = "ran_pars", conf.int = TRUE)
```

There are 3 ways we can plot the marginal depth effects on density. If we had other predictors in the model, we could set them. First, we can create new data frame of all potential values,

```{r}
nd <- data.frame(depth = seq(0, 400, length.out = 100))
p <- predict(
  fit1,
  newdata = nd,
  re_form = ~ 0, # means only include the fixed effects
  se_fit = TRUE # means calculate standard errors
)

ggplot(p, aes(depth, exp(est),
  ymin = exp(est - 1.96 * est_se), ymax = exp(est + 1.96 * est_se))) +
  geom_line() + geom_ribbon(alpha = 0.4)
```

The second approach is to pass the `sdmTMB` object to the `visreg` package. This shows the conditional effects, where all values other than depth are held at a particular value.

```{r}
visreg::visreg(fit1)
```

Third, we can use the `ggeffects` package which can be used to show the marginal effects of the smoothed variables (averaging over all other covariates rather than using a single fixed value). For more details see the [visualizing marginal effects vignette](https://pbs-assess.github.io/sdmTMB/articles/ggeffects.html)

```{r}
ggeffects::ggeffect(fit1)
```

#### Prediction

Let's now predict on a grid that covers the entire survey. This dataframe \`qcs_grid\` is built into the package:

```{r}
head(qcs_grid)
nd <- dplyr::filter(qcs_grid, year == 2003) # any one year will do
```

To predict on a new data frame, we can specify `newdata`,

```{r}
p <- predict(fit1, newdata = nd)
```

We can also plot each of the components of the predict object spatially

```{r}
# Depth effect contribution:
# (Everything not a random field)
ggplot(p, aes(X, Y, fill = exp(est_non_rf))) +
  geom_raster() +
  coord_fixed()

# Spatial random field:
ggplot(p, aes(X, Y, fill = omega_s)) +
  geom_raster() +
  scale_fill_gradient2() +
  coord_fixed()

# Overall estimate of density in link (log) space:
ggplot(p, aes(X, Y, fill = est)) +
  geom_raster() +
  coord_fixed()

# Overall estimate of density:
ggplot(p, aes(X, Y, fill = exp(est))) +
  geom_raster() +
  coord_fixed()

```

#### Fitting a model with a spatial field and spatiotemporal fields

Next, we expand this model to include independent spatiotemporal random fields. To simplify this model, we will not include the effect of depth. The spatial random fields should largely account for this effect. We'll include mean estimates for each year with \`0 + as.factor(year)\`. The \`\~ 0\` part tells R to not include a separate intercept. Without it we'd be estimating the first year as an intercept and years after that as deviations from that.

```{r}

fit2 <- sdmTMB(
  density ~ 0 + as.factor(year), #<<
  data = pcod,
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year", #<<
  spatiotemporal = "iid", #<<
  silent = FALSE
)

fit2

```

What is larger: sigma_O (the spatial standard deviation) or sigma_E (the spatiotemporal standard deviation)?

Inspect the sd_report and maximum gradient for fit2 \-- has the model converged?

```{r}
tidy(fit2, conf.int = TRUE)
tidy(fit2, effects = "ran_pars", conf.int = TRUE)
```

Again, predict on the survey grid:

```{r}
p2 <- predict(fit2, newdata = qcs_grid)
```

Prettier maps can be made by adding coastlines, to see examples check out the [mapping vignette](https://pbs-assess.github.io/sdmTMB/articles/pretty-plots.html)

```{r}
# Overall prediction in in log space:
ggplot(p2, aes(X, Y, fill = est)) +
  geom_raster() +
  facet_wrap(~year) +
  coord_fixed()

# What are these?
ggplot(p2, aes(X, Y, fill = exp(est_non_rf))) +
  geom_raster() +
  facet_wrap(~year) +
  coord_fixed()
```

Why do these spatial random field effects look the same every year?

```{r}
ggplot(p2, aes(X, Y, fill = omega_s)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2() +
  coord_fixed()
```

Here are the spatiotemporal random field effects each year. What processes might this represent?

```{r}
ggplot(p2, aes(X, Y, fill = epsilon_st)) +
  geom_raster() +
  facet_wrap(~year) +
  scale_fill_gradient2() +
  coord_fixed()
```

By default, sdmTMB shares the 'range' parameter across the spatial and spatiotemporal random fields because it's often hard to estimate. Reminder: the range is the distance at which spatial correlation is effectively independent (\~ 0.13 correlation). Try fitting the same model but let the range be estimated separately for the spatial and spatiotemporal parts. Look at the help file: ?sdmTMB

Hint, see the argument \`share_range\`

```{r}
fit3 <- sdmTMB(
  density ~ 0 + as.factor(year),
  data = pcod,
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year",
  spatiotemporal = "iid",
  share_range = FALSE, #<<
  silent = FALSE
)

fit3
tidy(fit3, "ran_pars", conf.int = TRUE)

```

What is different now in this model?
  
  Is the spatial or spatiotemporal range larger, and what does this mean?
  
  Finally, let's calculate an area-weighted population index. for details, see the [index standardization vignette](https://pbs-assess.github.io/sdmTMB/articles/index-standardization.html). All grid cells are 2 x 2 km = 4 km\^2.

```{r}
pred2 <- predict(fit2, newdata = qcs_grid, return_tmb_object = TRUE)
ind <- get_index(pred2, bias_correct = FALSE, area = 4)
```

In applied situations, you would want to set \`bias_correct = TRUE\` but this is much slower.

There's also an experimental (faster) option ?get_index_sims

```{r}
ggplot(ind, aes(year, est)) + geom_line() +
  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.4) +
  ylim(0, NA)
```

#### Fitting a model with time varying coefficients

We can model effects of time (here, year) in several ways with `sdmTMB`. Above, we treated year as a factor -- so each year had an estimated intercept as a fixed effect. This approach is generally used in stock assessments, to get unbiased estimates of trends. But for some applications, we may want to model year effects in other ways. If year effects were thought to be distributed around a common mean, we could treat them as random effects, e.g.

```{r}
pcod$fyear <- as.factor(pcod$year)
fit4 <- sdmTMB(
  density ~ (1|fyear),#<<
  data = pcod,
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year",
  spatiotemporal = "iid",
  share_range = TRUE,
  silent = FALSE
)

```

Alternatively, we can model year effects as smooth terms, like we would with a GAM. Similar to the example above where we model depth effects with smooth terms, we can model year with P-splines.

When we first used splines above, we only used the `s()` notation, with no additional arguments. That doesn't work for this application because the default basis dimension is 10, and there are only 9 years surveyed. More details on the basis dimension can be found here: <https://stat.ethz.ch/R-manual/R-devel/library/mgcv/html/smooth.construct.ps.smooth.spec.html>

We can initially set the basis dimension to 7, and the P-spline will assign more penalty to increased complexity (wiggliness).

```{r}
fit5 <- sdmTMB(
  density ~ s(year, k=7),#<<
  data = pcod,
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year",
  spatiotemporal = "iid",
  share_range = TRUE,
  silent = FALSE
)
```

1.  Try to plot the smooth year effects
2.  Change the basis dimension to 3 and plot it again to get a sense for how much the wiggliness changes

The other way we can model temporal effects is by treating them as random walks, similar to a dynamic linear model (DLM). This approach will generally be less smooth than the P-spline above. We don't include an intercept in the main formula, but use the `time_varying` component to specify which coefficients should be included as random walks. This model just includes an intercept, though other slope coefficients could also be modeled as time-varying.

```{r}
fit6 <- sdmTMB(
  density ~ -1,#<<
  data = pcod,
  time_varying = ~ 1,#<<
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year",
  spatiotemporal = "iid",
  share_range = TRUE,
  silent = FALSE
)
```

#### Fitting a model with spatially varying coefficients

Spatial varying coefficient models are a way to model covariate effects that may be spatially non-stationary. Examples might be in some ecosystems where the effect of temperature or oxygen has a spatial component. We can specify these with the `spatial_varying` argument. The `pcod` dataset doesn't include environmental variables, but we can model the time trend as spatially varying. See also the [spatial trend vignette](https://pbs-assess.github.io/sdmTMB/articles/spatial-trend-models.html)

The only thing we need to do is turn time into a standardized variable, which we'll call `scaled_year`. This is done to help with estimation. The new variable is passed into the main formula, and the `spatial_varying` formula,

```{r}
pcod$scaled_year <- (pcod$year - mean(pcod$year)) / sd(pcod$year)

fit7 <- sdmTMB(
  density ~ scaled_year,
  data = pcod,
  spatial_varying = ~ 0 + scaled_year,#<<
  family = tweedie(link = "log"),
  mesh = mesh,
  spatial = "on",
  time = "year",
  spatiotemporal = "off",
  silent = FALSE
)
```

This spatial trend model can be thought of as a very complex linear regression model, where the intercept and slopes are spatial field. We've used `sigma_O` to represent the standard deviation of the spatially constant field ( intercept ) and now use `sigma_Z` to represent the standard deviation of the year slope.

We can look at these parameters with

```{r}
tidy(fit7, "ran_pars", conf.int = TRUE)
```

To look at the effects, we need to predict on a grid. We also need to add a column for `scaled_year` to match the fitting:

```{r}
nd <- qcs_grid
nd$scaled_year <- (nd$year - mean(pcod$year)) / sd(pcod$year)
p1 <- predict(fit7, newdata = nd)
```

We will just pick out a single year to plot since they should all be the same for the slopes. Note that these are in log space. `zeta_s` are the spatially varying coefficients.

```{r}
ggplot(dplyr::filter(p1, year == 2003), 
       aes("X", "Y", fill = zeta_s_scaled_year)) +
    geom_raster() +
    facet_wrap(~year) +
    coord_fixed() +
    scale_fill_viridis_c()
```
